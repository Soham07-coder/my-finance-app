"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Category`."""
  allCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection

  """Reads and enables pagination through a set of `Family`."""
  allFamilies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyCondition
  ): FamiliesConnection

  """Reads and enables pagination through a set of `FamilyMember`."""
  allFamilyMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMemberCondition
  ): FamilyMembersConnection

  """Reads and enables pagination through a set of `Transaction`."""
  allTransactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition
  ): TransactionsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  categoryById(id: Int!): Category
  categoryByNameAndUserIdAndType(name: String!, userId: Int!, type: String!): Category
  categoryByNameAndFamilyIdAndType(name: String!, familyId: Int!, type: String!): Category
  familyById(id: Int!): Family
  familyByInviteCode(inviteCode: String!): Family
  familyMemberByUserIdAndFamilyId(userId: Int!, familyId: Int!): FamilyMember
  transactionById(id: Int!): Transaction
  userById(id: Int!): User
  userByUsername(username: String!): User
  userByEmail(email: String!): User
  userByGoogleId(googleId: String!): User

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `Family` using its globally unique `ID`."""
  family(
    """The globally unique `ID` to be used in selecting a single `Family`."""
    nodeId: ID!
  ): Family

  """Reads a single `FamilyMember` using its globally unique `ID`."""
  familyMember(
    """
    The globally unique `ID` to be used in selecting a single `FamilyMember`.
    """
    nodeId: ID!
  ): FamilyMember

  """Reads a single `Transaction` using its globally unique `ID`."""
  transaction(
    """
    The globally unique `ID` to be used in selecting a single `Transaction`.
    """
    nodeId: ID!
  ): Transaction

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category]!

  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  type: String!
  userId: Int
  familyId: Int
  isDefault: Boolean

  """Reads a single `User` that is related to this `Category`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Category`."""
  familyByFamilyId: Family
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String!
  email: String!
  passwordHash: String!
  createdAt: Datetime

  """Foreign key to the primary family this user belongs to."""
  familyId: Int
  googleId: String

  """Reads a single `Family` that is related to this `User`."""
  familyByFamilyId: Family

  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition
  ): TransactionsConnection!

  """Reads and enables pagination through a set of `FamilyMember`."""
  familyMembersByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMemberCondition
  ): FamilyMembersConnection!

  """Reads and enables pagination through a set of `Category`."""
  categoriesByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""Stores information about family groups."""
type Family implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  createdAt: Datetime
  inviteCode: String

  """Reads and enables pagination through a set of `User`."""
  usersByFamilyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection!

  """Reads and enables pagination through a set of `Transaction`."""
  transactionsByFamilyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition
  ): TransactionsConnection!

  """Reads and enables pagination through a set of `FamilyMember`."""
  familyMembersByFamilyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FamilyMemberCondition
  ): FamilyMembersConnection!

  """Reads and enables pagination through a set of `Category`."""
  categoriesByFamilyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  GOOGLE_ID_ASC
  GOOGLE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `familyId` field."""
  familyId: Int

  """Checks for equality with the object’s `googleId` field."""
  googleId: String
}

"""A connection to a list of `Transaction` values."""
type TransactionsConnection {
  """A list of `Transaction` objects."""
  nodes: [Transaction]!

  """
  A list of edges which contains the `Transaction` and cursor to aid in pagination.
  """
  edges: [TransactionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transaction` you could get from the connection."""
  totalCount: Int!
}

type Transaction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  description: String!
  amount: BigFloat!
  category: String!
  transactionType: String!
  date: Datetime
  eventId: Int

  """
  Foreign key to a family for shared expense tracking. Can be NULL for personal transactions.
  """
  familyId: Int

  """Reads a single `User` that is related to this `Transaction`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Transaction`."""
  familyByFamilyId: Family
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A `Transaction` edge in the connection."""
type TransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transaction` at the end of the edge."""
  node: Transaction
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  TRANSACTION_TYPE_ASC
  TRANSACTION_TYPE_DESC
  DATE_ASC
  DATE_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `transactionType` field."""
  transactionType: String

  """Checks for equality with the object’s `date` field."""
  date: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: Int

  """Checks for equality with the object’s `familyId` field."""
  familyId: Int
}

"""A connection to a list of `FamilyMember` values."""
type FamilyMembersConnection {
  """A list of `FamilyMember` objects."""
  nodes: [FamilyMember]!

  """
  A list of edges which contains the `FamilyMember` and cursor to aid in pagination.
  """
  edges: [FamilyMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FamilyMember` you could get from the connection."""
  totalCount: Int!
}

"""Links users to families, defining their membership."""
type FamilyMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  familyId: Int!
  role: String
  joinedAt: Datetime

  """Reads a single `User` that is related to this `FamilyMember`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `FamilyMember`."""
  familyByFamilyId: Family
}

"""A `FamilyMember` edge in the connection."""
type FamilyMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FamilyMember` at the end of the edge."""
  node: FamilyMember
}

"""Methods to use when ordering `FamilyMember`."""
enum FamilyMembersOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  ROLE_ASC
  ROLE_DESC
  JOINED_AT_ASC
  JOINED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FamilyMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FamilyMemberCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `familyId` field."""
  familyId: Int

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `joinedAt` field."""
  joinedAt: Datetime
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  USER_ID_ASC
  USER_ID_DESC
  FAMILY_ID_ASC
  FAMILY_ID_DESC
  IS_DEFAULT_ASC
  IS_DEFAULT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `familyId` field."""
  familyId: Int

  """Checks for equality with the object’s `isDefault` field."""
  isDefault: Boolean
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""A connection to a list of `Family` values."""
type FamiliesConnection {
  """A list of `Family` objects."""
  nodes: [Family]!

  """
  A list of edges which contains the `Family` and cursor to aid in pagination.
  """
  edges: [FamiliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Family` you could get from the connection."""
  totalCount: Int!
}

"""A `Family` edge in the connection."""
type FamiliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Family` at the end of the edge."""
  node: Family
}

"""Methods to use when ordering `Family`."""
enum FamiliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  INVITE_CODE_ASC
  INVITE_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Family` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FamilyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `inviteCode` field."""
  inviteCode: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `Family`."""
  createFamily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFamilyInput!
  ): CreateFamilyPayload

  """Creates a single `FamilyMember`."""
  createFamilyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFamilyMemberInput!
  ): CreateFamilyMemberPayload

  """Creates a single `Transaction`."""
  createTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTransactionInput!
  ): CreateTransactionPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByIdInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryByNameAndUserIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNameAndUserIdAndTypeInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryByNameAndFamilyIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNameAndFamilyIdAndTypeInput!
  ): UpdateCategoryPayload

  """Updates a single `Family` using its globally unique id and a patch."""
  updateFamily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyInput!
  ): UpdateFamilyPayload

  """Updates a single `Family` using a unique key and a patch."""
  updateFamilyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyByIdInput!
  ): UpdateFamilyPayload

  """Updates a single `Family` using a unique key and a patch."""
  updateFamilyByInviteCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyByInviteCodeInput!
  ): UpdateFamilyPayload

  """
  Updates a single `FamilyMember` using its globally unique id and a patch.
  """
  updateFamilyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMemberInput!
  ): UpdateFamilyMemberPayload

  """Updates a single `FamilyMember` using a unique key and a patch."""
  updateFamilyMemberByUserIdAndFamilyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFamilyMemberByUserIdAndFamilyIdInput!
  ): UpdateFamilyMemberPayload

  """
  Updates a single `Transaction` using its globally unique id and a patch.
  """
  updateTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionInput!
  ): UpdateTransactionPayload

  """Updates a single `Transaction` using a unique key and a patch."""
  updateTransactionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionByIdInput!
  ): UpdateTransactionPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByGoogleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByGoogleIdInput!
  ): UpdateUserPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryByNameAndUserIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNameAndUserIdAndTypeInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryByNameAndFamilyIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNameAndFamilyIdAndTypeInput!
  ): DeleteCategoryPayload

  """Deletes a single `Family` using its globally unique id."""
  deleteFamily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyInput!
  ): DeleteFamilyPayload

  """Deletes a single `Family` using a unique key."""
  deleteFamilyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyByIdInput!
  ): DeleteFamilyPayload

  """Deletes a single `Family` using a unique key."""
  deleteFamilyByInviteCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyByInviteCodeInput!
  ): DeleteFamilyPayload

  """Deletes a single `FamilyMember` using its globally unique id."""
  deleteFamilyMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMemberInput!
  ): DeleteFamilyMemberPayload

  """Deletes a single `FamilyMember` using a unique key."""
  deleteFamilyMemberByUserIdAndFamilyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFamilyMemberByUserIdAndFamilyIdInput!
  ): DeleteFamilyMemberPayload

  """Deletes a single `Transaction` using its globally unique id."""
  deleteTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionInput!
  ): DeleteTransactionPayload

  """Deletes a single `Transaction` using a unique key."""
  deleteTransactionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionByIdInput!
  ): DeleteTransactionPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByGoogleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByGoogleIdInput!
  ): DeleteUserPayload
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Category`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Category`."""
  familyByFamilyId: Family

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  id: Int
  name: String!
  type: String
  userId: Int
  familyId: Int
  isDefault: Boolean
}

"""The output of our create `Family` mutation."""
type CreateFamilyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Family` that was created by this mutation."""
  family: Family

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Family`. May be used by Relay 1."""
  familyEdge(
    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesEdge
}

"""All input for the create `Family` mutation."""
input CreateFamilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Family` to be created by this mutation."""
  family: FamilyInput!
}

"""An input for mutations affecting `Family`"""
input FamilyInput {
  id: Int
  name: String!
  createdAt: Datetime
  inviteCode: String
}

"""The output of our create `FamilyMember` mutation."""
type CreateFamilyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FamilyMember` that was created by this mutation."""
  familyMember: FamilyMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FamilyMember`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `FamilyMember`."""
  familyByFamilyId: Family

  """An edge for our `FamilyMember`. May be used by Relay 1."""
  familyMemberEdge(
    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembersEdge
}

"""All input for the create `FamilyMember` mutation."""
input CreateFamilyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FamilyMember` to be created by this mutation."""
  familyMember: FamilyMemberInput!
}

"""An input for mutations affecting `FamilyMember`"""
input FamilyMemberInput {
  userId: Int!
  familyId: Int!
  role: String
  joinedAt: Datetime
}

"""The output of our create `Transaction` mutation."""
type CreateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was created by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Transaction`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Transaction`."""
  familyByFamilyId: Family

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the create `Transaction` mutation."""
input CreateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Transaction` to be created by this mutation."""
  transaction: TransactionInput!
}

"""An input for mutations affecting `Transaction`"""
input TransactionInput {
  id: Int
  userId: Int!
  description: String!
  amount: BigFloat!
  category: String!
  transactionType: String!
  date: Datetime
  eventId: Int

  """
  Foreign key to a family for shared expense tracking. Can be NULL for personal transactions.
  """
  familyId: Int
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Family` that is related to this `User`."""
  familyByFamilyId: Family

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String!
  email: String!
  passwordHash: String!
  createdAt: Datetime

  """Foreign key to the primary family this user belongs to."""
  familyId: Int
  googleId: String
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Category`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Category`."""
  familyByFamilyId: Family

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  id: Int
  name: String
  type: String
  userId: Int
  familyId: Int
  isDefault: Boolean
}

"""All input for the `updateCategoryById` mutation."""
input UpdateCategoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  id: Int!
}

"""All input for the `updateCategoryByNameAndUserIdAndType` mutation."""
input UpdateCategoryByNameAndUserIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  name: String!
  userId: Int!
  type: String!
}

"""All input for the `updateCategoryByNameAndFamilyIdAndType` mutation."""
input UpdateCategoryByNameAndFamilyIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  name: String!
  familyId: Int!
  type: String!
}

"""The output of our update `Family` mutation."""
type UpdateFamilyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Family` that was updated by this mutation."""
  family: Family

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Family`. May be used by Relay 1."""
  familyEdge(
    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesEdge
}

"""All input for the `updateFamily` mutation."""
input UpdateFamilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Family` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Family` being updated.
  """
  familyPatch: FamilyPatch!
}

"""
Represents an update to a `Family`. Fields that are set will be updated.
"""
input FamilyPatch {
  id: Int
  name: String
  createdAt: Datetime
  inviteCode: String
}

"""All input for the `updateFamilyById` mutation."""
input UpdateFamilyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Family` being updated.
  """
  familyPatch: FamilyPatch!
  id: Int!
}

"""All input for the `updateFamilyByInviteCode` mutation."""
input UpdateFamilyByInviteCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Family` being updated.
  """
  familyPatch: FamilyPatch!
  inviteCode: String!
}

"""The output of our update `FamilyMember` mutation."""
type UpdateFamilyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FamilyMember` that was updated by this mutation."""
  familyMember: FamilyMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FamilyMember`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `FamilyMember`."""
  familyByFamilyId: Family

  """An edge for our `FamilyMember`. May be used by Relay 1."""
  familyMemberEdge(
    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembersEdge
}

"""All input for the `updateFamilyMember` mutation."""
input UpdateFamilyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMember` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FamilyMember` being updated.
  """
  familyMemberPatch: FamilyMemberPatch!
}

"""
Represents an update to a `FamilyMember`. Fields that are set will be updated.
"""
input FamilyMemberPatch {
  userId: Int
  familyId: Int
  role: String
  joinedAt: Datetime
}

"""All input for the `updateFamilyMemberByUserIdAndFamilyId` mutation."""
input UpdateFamilyMemberByUserIdAndFamilyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FamilyMember` being updated.
  """
  familyMemberPatch: FamilyMemberPatch!
  userId: Int!
  familyId: Int!
}

"""The output of our update `Transaction` mutation."""
type UpdateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was updated by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Transaction`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Transaction`."""
  familyByFamilyId: Family

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the `updateTransaction` mutation."""
input UpdateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Transaction` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Transaction` being updated.
  """
  transactionPatch: TransactionPatch!
}

"""
Represents an update to a `Transaction`. Fields that are set will be updated.
"""
input TransactionPatch {
  id: Int
  userId: Int
  description: String
  amount: BigFloat
  category: String
  transactionType: String
  date: Datetime
  eventId: Int

  """
  Foreign key to a family for shared expense tracking. Can be NULL for personal transactions.
  """
  familyId: Int
}

"""All input for the `updateTransactionById` mutation."""
input UpdateTransactionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Transaction` being updated.
  """
  transactionPatch: TransactionPatch!
  id: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Family` that is related to this `User`."""
  familyByFamilyId: Family

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  email: String
  passwordHash: String
  createdAt: Datetime

  """Foreign key to the primary family this user belongs to."""
  familyId: Int
  googleId: String
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  username: String!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  email: String!
}

"""All input for the `updateUserByGoogleId` mutation."""
input UpdateUserByGoogleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  googleId: String!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Category`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Category`."""
  familyByFamilyId: Family

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategoryById` mutation."""
input DeleteCategoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCategoryByNameAndUserIdAndType` mutation."""
input DeleteCategoryByNameAndUserIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  userId: Int!
  type: String!
}

"""All input for the `deleteCategoryByNameAndFamilyIdAndType` mutation."""
input DeleteCategoryByNameAndFamilyIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  familyId: Int!
  type: String!
}

"""The output of our delete `Family` mutation."""
type DeleteFamilyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Family` that was deleted by this mutation."""
  family: Family
  deletedFamilyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Family`. May be used by Relay 1."""
  familyEdge(
    """The method to use when ordering `Family`."""
    orderBy: [FamiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamiliesEdge
}

"""All input for the `deleteFamily` mutation."""
input DeleteFamilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Family` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFamilyById` mutation."""
input DeleteFamilyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFamilyByInviteCode` mutation."""
input DeleteFamilyByInviteCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  inviteCode: String!
}

"""The output of our delete `FamilyMember` mutation."""
type DeleteFamilyMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FamilyMember` that was deleted by this mutation."""
  familyMember: FamilyMember
  deletedFamilyMemberId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FamilyMember`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `FamilyMember`."""
  familyByFamilyId: Family

  """An edge for our `FamilyMember`. May be used by Relay 1."""
  familyMemberEdge(
    """The method to use when ordering `FamilyMember`."""
    orderBy: [FamilyMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FamilyMembersEdge
}

"""All input for the `deleteFamilyMember` mutation."""
input DeleteFamilyMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FamilyMember` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFamilyMemberByUserIdAndFamilyId` mutation."""
input DeleteFamilyMemberByUserIdAndFamilyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  familyId: Int!
}

"""The output of our delete `Transaction` mutation."""
type DeleteTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was deleted by this mutation."""
  transaction: Transaction
  deletedTransactionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Transaction`."""
  userByUserId: User

  """Reads a single `Family` that is related to this `Transaction`."""
  familyByFamilyId: Family

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the `deleteTransaction` mutation."""
input DeleteTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Transaction` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTransactionById` mutation."""
input DeleteTransactionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Family` that is related to this `User`."""
  familyByFamilyId: Family

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByGoogleId` mutation."""
input DeleteUserByGoogleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  googleId: String!
}
